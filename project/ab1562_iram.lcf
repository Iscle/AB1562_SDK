/* ===========================================================================
 *
 * @COPYRIGHT	Copyright(c) 2015 AIROHA TECHNOLOGY CORP. CO., LTD. ALL RIGHTS RESERVED
 *
 * @DETAILS		The reference linker command file for the Andes.  Applications
 *   			may use unmodified, or copy this to an application directory to
 *   			modify as needed.
 *
 * =========================================================================== */
ENTRY(_ResetVector_text_start)

MEMORY {
     ROM_DSP0(rx)                   : ORIGIN = 0x0812C000, LENGTH = 668K
     VROM_DSP0(rx)                  : ORIGIN = 0x8812C000, LENGTH = 668K
     IRAM(rx)                       : ORIGIN = 0x04580000, LENGTH = 160K
     DRAM(rw)                       : ORIGIN = 0x04500000, LENGTH = 384K
     SYSRAM_DSP0 (rwx)              : ORIGIN = 0x04200000, LENGTH = 8K
     VSYSRAM_DSP0 (rwx)             : ORIGIN = 0x84200000, LENGTH = 8K
     ROM_LOG_STRING(rx)             : ORIGIN = 0x06000000, LENGTH = 32M
}

 /* Highest address of the stack */
__stack = ORIGIN(DRAM) + _stack_size;    /* begin of DRAM */

/* Generate a link error if stack don't fit into DRAM */
_stack_size = 0x1000; /* required amount of stack 4KB */

/* stack start */
_stack_start = ORIGIN(DRAM);

/* swla size */
_swla_size = 0;

/* Linker symbol provided for C/Assembly Code */
_iram_start     = ORIGIN(IRAM);
_iram_length    = LENGTH(IRAM);
_dram_start     = ORIGIN(DRAM);
_dram_length    = LENGTH(DRAM);
_sysram_start   = ORIGIN(SYSRAM_DSP0);
_sysram_length  = LENGTH(SYSRAM_DSP0);
_vsysram_start  = ORIGIN(VSYSRAM_DSP0);
_vsysram_length = LENGTH(VSYSRAM_DSP0);

flashAddr       = 0x08000000;

SECTIONS {
     /* @@@static vector@@@ */
       _ResetVector_load = LOADADDR(.ResetVector.text);
       .ResetVector.text : ALIGN(8)
       {
       _ResetVector_text_start = ABSOLUTE(.);
       KEEP (*(.ResetVector.literal .ResetVector.text))
       KEEP (*(.Reset.literal .Reset.text))
       . = ABSOLUTE(_ResetVector_text_start) + 0x400;
       _ResetVector_text_end = ALIGN(0x8);
       } >IRAM

      /* @@@Dynamic vectors@@@ */
       _DynamicVectors_load = LOADADDR(.DynamicVectors.text);
       .DynamicVectors.text : ALIGN(8)
       {
       _DynamicVectors_start = ABSOLUTE(.);

       /* WindowVectors literal and text */
       _WindowVectors_text_start = ABSOLUTE(.);
       KEEP (*(.WindowVectors.text))
       . = ALIGN(4);
       _WindowVectors_text_end = ABSOLUTE(.);
       . = ABSOLUTE(_WindowVectors_text_start) + 0x178;

       /* Level2 literal and text */
       _Level2InterruptVector_literal_start = ABSOLUTE(.);
       *(.Level2InterruptVector.literal)
       . = ABSOLUTE(_Level2InterruptVector_literal_start) + 0x4;
       _Level2InterruptVector_text_start = ABSOLUTE(.);
       KEEP (*(.Level2InterruptVector.text))
       . = ABSOLUTE(_Level2InterruptVector_text_start) + 0x1c;

       /* Level3 literal and text */
       _Level3InterruptVector_literal_start = ABSOLUTE(.);
       *(.Level3InterruptVector.literal)
       . = ABSOLUTE(_Level3InterruptVector_literal_start) + 0x4;
       _Level3InterruptVector_text_start = ABSOLUTE(.);
       KEEP (*(.Level3InterruptVector.text))
       . = ABSOLUTE(_Level3InterruptVector_text_start) + 0x1c;

       /* Level4 literal and text */
       _Level4InterruptVector_literal_start = ABSOLUTE(.);
       *(.Level4InterruptVector.literal)
       . = ABSOLUTE(_Level4InterruptVector_literal_start) + 0x4;
       _Level4InterruptVector_text_start = ABSOLUTE(.);
       KEEP (*(.Level4InterruptVector.text))
       . = ABSOLUTE(_Level4InterruptVector_text_start) + 0x1c;

       /* DebugException literal and text */
       _DebugExceptionVector_literal_start = ABSOLUTE(.);
       *(.DebugExceptionVector.literal)
       . = ABSOLUTE(_DebugExceptionVector_literal_start) + 0x4;
       _DebugExceptionVector_text_start = ABSOLUTE(.);
       KEEP (*(.DebugExceptionVector.text))
       . = ABSOLUTE(_DebugExceptionVector_text_start) + 0x1c;

       /* NMIException literal and text */
       _NMIExceptionVector_literal_start = ABSOLUTE(.);
       *(.NMIExceptionVector.literal)
       . = ABSOLUTE(_NMIExceptionVector_literal_start)+ 0x4;
       _NMIExceptionVector_text_start = ABSOLUTE(.);
       KEEP (*(.NMIExceptionVector.text))
       . = ABSOLUTE(_NMIExceptionVector_text_start) + 0x1c;

       /* KernelException literal and text */
       _KernelExceptionVector_literal_start = ABSOLUTE(.);
       *(.KernelExceptionVector.literal)
       . = ABSOLUTE(_KernelExceptionVector_literal_start) + 0x4;
       _KernelExceptionVector_text_start = ABSOLUTE(.);
       KEEP (*(.KernelExceptionVector.text))
       . = ABSOLUTE(_KernelExceptionVector_text_start) + 0x1c;

       /* UserException literal and text */
       _UserExceptionVector_literal_start = ABSOLUTE(.);
       *(.UserExceptionVector.literal)
       . = ABSOLUTE(_UserExceptionVector_literal_start) + 0x4;
       _UserExceptionVector_text_start = ABSOLUTE(.);
       KEEP (*(.UserExceptionVector.text))
       . = ABSOLUTE(_UserExceptionVector_text_start) + 0x1c;

       /* DoubleException literal and text */
       _DoubleExceptionVector_literal_start = ABSOLUTE(.);
       *(.DoubleExceptionVector.literal)
       . = ABSOLUTE(_DoubleExceptionVector_literal_start) + 0x4;
       _DoubleExceptionVector_text_start = ABSOLUTE(.);
       KEEP (*(.DoubleExceptionVector.text))
       . = ABSOLUTE(_DoubleExceptionVector_text_start) + 0x1c;

       _DynamicVectors_end = ABSOLUTE(.);
       } >IRAM

       /* @@@iram text@@@ */
       _iram_text_load = LOADADDR(.iram.text);
       .iram.text : ALIGN(8)
       {
       . = ALIGN(8);
       _iram_text_start = ABSOLUTE(.);

       *(.iram*)
       *(.ram_code)
       *(.ram_code.*)
       *(.tcm_code.*)
       *(.sysram_code.*)
       *FreeRTOS*.o(.literal*)
       *FreeRTOS*.o(.text*)
       *libc.a:*(.literal*)
       *libc.a:*(.text*)
       *libhal.a:*(.literal*)
       *libhal.a:*(.text*)
       *libhandlers-board.a:*(.literal*)
       *libhandlers-board.a:*(.text*)

       . = ALIGN(8);
       _iram_text_end = ABSOLUTE(.);
       } >IRAM

       /* @@@rom text and rodata@@@ */
       _text_load = LOADADDR(.text);
       . = ALIGN(8);
       .text .  : ALIGN(8)
       {
       _text_start = ABSOLUTE(.);


       *(.literal* .text*)
       *(.init.literal .init)
       *(.fini.literal .fini)
       *(.dtors.literal .dtors)
       *(.ctors.literal .ctors)

       . = ALIGN(8);
       _text_end = ABSOLUTE(.);
       } >IRAM

       /* @@@region loader@@@ */
       _region_loader_load = LOADADDR(.region_loader);
       .region_loader : ALIGN(8)
       {
       . = ALIGN(8);
       _region_loader_start = ABSOLUTE(.);

       *(.region_loader.literal .region_loader.text)

       . = ALIGN(8);
       _region_loader_end = ABSOLUTE(.);
       } >IRAM

       /* @@@iram pic memory@@@ */
       .preloader_pic_iram (NOLOAD) :
       {
       . = ALIGN(8);
       _preloader_pic_iram_start = .;

       . = ALIGN(8);
       _preloader_pic_iram_end   = ORIGIN(IRAM)+ LENGTH(IRAM);
       } > IRAM

       .stack (NOLOAD) :
       {
       . = ALIGN(8);

       . = . + _stack_size;

       . = ALIGN(8);
       } > DRAM

       /* @@@dram data and bss@@@ */
       _data_load = LOADADDR(.data);
       _cached_ram_text_data_load = LOADADDR(.data);
       _noncached_ram_data_load = LOADADDR(.data);
       _cached_sysram_text_data_load = LOADADDR(.data);
       _noncached_sysram_data_load = LOADADDR(.data);
       .data : ALIGN(8)
       {
       . = ALIGN(8);
       _data_start = ABSOLUTE(.);
       _cached_ram_text_data_start = .;
       _noncached_ram_data_start = .;
       _cached_sysram_text_data_start = .;
       _noncached_sysram_data_start = .;

       *(.rodata)
       *(.rodata.*)
       *(.data)
       *(.data.*)
       KEEP (*(.eh_frame))
       *(.tcm_rodata.*)
       *(.ram_rodata)
       *(.ram_rodata.*)
       *(.tcm_rwdata.*)
       *(.cached_ram_data.*)
       *(.noncached_ram_rwdata.*)
       *(.sysram_rodata.*)
       *(.cached_sysram_rwdata.*)
       *(.noncached_sysram_rwdata.*)

       . = ALIGN(4);
       _log_filter_start = .;
       *(SORT_BY_NAME(.log_filter.*))
       _log_filter_end = .;

       . = ALIGN(8);
       _data_end = ABSOLUTE(.);
       _cached_ram_text_data_end = .;
       _noncached_ram_data_end = .;
       _cached_sysram_text_data_end = .;
       _noncached_sysram_data_end = .;
       } >DRAM   AT > IRAM

       .bss (NOLOAD):
       {
       . = ALIGN(8);
       _bss_start = ABSOLUTE(.);
       _cached_ram_bss_start = .;
       _noncached_ram_bss_start = .;
       _cached_sysram_bss_start = .;
       _noncached_sysram_bss_start = .;

       *(.bss)
       *(.bss.*)
       *(COMMON)
       *(.tcm_zidata.*)
       *(.cached_ram_bss.*)
       *(.noncached_ram_zidata.*)
       *(.cached_sysram_zidata.*)
       *(.noncached_sysram_zidata.*)

       . = ALIGN(8);
       _bss_end = ABSOLUTE(.);
       _cached_ram_bss_end = .;
       _noncached_ram_bss_end = .;
       _cached_sysram_bss_end = .;
       _noncached_sysram_bss_end = .;
       } > DRAM

       /* @@@dram pic memory@@@ */
       .preloader_pic_dram (NOLOAD) :
       {
       . = ALIGN(8);
       _preloader_pic_dram_start = .;

       . = ALIGN(8);
       _preloader_pic_dram_end   = ORIGIN(DRAM)+ LENGTH(DRAM);
       } > DRAM

       /* @@@log string@@@ */
       .log_str :
       {
         *(.log_version)
         *(.log_timestamp)
         *(SORT_BY_NAME(.log_filter_mirror*))
         *(.log_filter_end)
         *(.log_string)
       } > ROM_LOG_STRING

        /* @@@reserved section for debug symbol when add --gc-sections for LDFLAG @@@ */
       .xt.prop 0:
       {
       KEEP (*(.xt.prop))
       KEEP (*(.xt.prop.*))
       KEEP (*(.gnu.linkonce.prop.*))
       }
}