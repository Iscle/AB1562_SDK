/* Copyright Statement:
 *
 * (C) 2017  Airoha Technology Corp. All rights reserved.
 *
 * This software/firmware and related documentation ("Airoha Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to Airoha Technology Corp. ("Airoha") and/or its licensors.
 * Without the prior written permission of Airoha and/or its licensors,
 * any reproduction, modification, use or disclosure of Airoha Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 * You may only use, reproduce, modify, or distribute (as applicable) Airoha Software
 * if you have agreed to and been bound by the applicable license agreement with
 * Airoha ("License Agreement") and been granted explicit permission to do so within
 * the License Agreement ("Permitted User").  If you are not a Permitted User,
 * please cease any access or use of Airoha Software immediately.
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT AIROHA SOFTWARE RECEIVED FROM AIROHA AND/OR ITS REPRESENTATIVES
 * ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. AIROHA EXPRESSLY DISCLAIMS ANY AND ALL
 * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES AIROHA PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH AIROHA SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN AIROHA SOFTWARE. AIROHA SHALL ALSO NOT BE RESPONSIBLE FOR ANY AIROHA
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND AIROHA'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO AIROHA SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT AIROHA'S OPTION, TO REVISE OR REPLACE AIROHA SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * AIROHA FOR SUCH AIROHA SOFTWARE AT ISSUE.
 */
 
 
#ifndef _APP_SYSTEM_H_
#define _APP_SYSTEM_H_

#include "message.h"


/* IF packet transmission time is about 20~50 ms. */
#define HALF_SLOT					312		//us
#define LED_SYNC_TIME				900		//ms
#define VPRT_PLAY_MIN_DELAY_TIME	70		//ms
#define VPRT_PLAY_SYNC_TIME			380		//ms
#define BEEP_PLAY_SYNC_TIME			380		//ms
#define VPRT_STOP_SYNC_TIME			300		//ms
#define PEQ_SYNC_TIME				850		//ms
#define ANC_SYNC_TIME				380		//ms


#define AIR_PAIRING_INQ_SCAN_INTERVAL 			0x0100
#define EARBUDS_SHARE_PAIRING_INQ_SCAN_INTERVAL 0x0100
#define MP_TEST_MODE_INQ_SCAN_INTERVAL			0x0400 //640 ms
#define INQ_SCAN_DEFAULT_WINDOW 				0x0012
#define INQ_SCAN_DEFAULT_INTERVAL 				0x1000

#if 0 /* Unused LOG_PRINT_156X */
#define DBG_LOG_APP_SYSTEM(_message, arg_cnt, ...) 
#else
#define DBG_LOG_APP_SYSTEM(_message, arg_cnt, ...)   LOG_MSGID_I(APP_SYSTEM, _message, arg_cnt, ##__VA_ARGS__)
<<<<<<< HEAD
=======
#define ERR_LOG_APP_SYSTEM(_message, arg_cnt, ...)   LOG_MSGID_E(APP_SYSTEM, _message, arg_cnt, ##__VA_ARGS__)
>>>>>>> db20e11 (second commit)
#endif

/**************************************************************************************************
* Enum
**************************************************************************************************/
enum
{
	APP_SYSTEM_POWER_ON,
	APP_SYSTEM_POWERON_TO_CONNECTABLE,
	APP_SYSTEM_CONNECTABLE,
	APP_SYSTEM_CONNECTABLE_TO_DISCOVERABLE,
	//APP_SYSTEM_DISCOVERABLE,
	APP_SYSTEM_CONNECTABLE_AND_DISCOVERABLE,
	APP_SYSTEM_CONNECTandDISCOVER_TO_CONNECTABLE,
	APP_SYSTEM_ALLSTATE_TO_POWERON,
};

enum
{
	APP_SYSTEM_STATE_SET,
	APP_SYSTEM_STATE_GET_POWEROFF,
	APP_SYSTEM_STATE_GET_POWERON,
	APP_SYSTEM_STATE_GET_PAIRING,
};

#if SINGLE_HEADSET_MODE_ENABLE
enum
{
	APP_NORMAL_HEADSET_MODE,
	APP_SINGLE_CONVERTING_MODE,
	APP_SIGNLE_HEADSET_MODE,
	APP_SINGLE_LEAVING_MODE,
};
#endif

enum
{
	APP_ROLE_MODE_STATE_IDLE,
	APP_ROLE_MODE_STATE_CHANGING_TO_AGENT,
	APP_ROLE_MODE_STATE_CHANGING_TO_PARTNER,
};

enum
{
	APP_ROLE_MODE_NONE,
	APP_ROLE_MODE_SUPER_RECONNECT,
	APP_ROLE_MODE_SINGLE_HEADSET,
};

enum
{
	HCI_ERCODE_SUCCESS,
	HCI_ERCODE_UNKNOWN_HCI_CMD,
	HCI_ERCODE_UNKNOWN_CONNECTION_IDENTIFIER,
	HCI_ERCODE_HARDWARE_FAIRLURE,
	HCI_ERCODE_PAGE_TIMEOUT,
	HCI_ERCODE_AUTHENTICATION_FAILURE,								//5
	HCI_ERCODE_PIN_OR_KEY_MISSING,
	HCI_ERCODE_MEMORY_CAPACITY_EXCEEDED,
	HCI_ERCODE_CONNECTION_TIMEOUT,
	HCI_ERCODE_CONNECTION_LIMIT_EXCEEDED,
	HCI_ERCODE_SYNCRONOUS_CONNECTION_LIMIT_TO_A_DEVICE_EXCEEDED,	//10
	HCI_ERCODE_ACL_CONNECTION_ALREADY_EXISTS,
	HCI_ERCODE_COMMAND_DISALLOWED,
	HCI_ERCODE_CONNECTION_REJECTED_DUE_TO_LIMITED_RESOURCES,
	HCI_ERCODE_CONNECTION_REJECTED_DUE_TO_SECURITY_REASON,
	HCI_ERCODE_CONNECTION_REJECTED_DUE_TO_UNACCEPTABLE_BDADDR,		//15
	HCI_ERCODE_CONNECTION_ACCEPT_TIMEOUR_EXCEEDED,
	HCI_ERCODE_UNSUPPORTED_FEATURE_OR_PARAMETER_VALUE,
	HCI_ERCODE_INVALID_HCI_COMMAND_PARAMETERS,
	HCI_ERCODE_REMOTE_USER_TERMINATED_CONNECTION,
	HCI_ERCODE_REMOTE_DEVICE_TERMINATED_CONNECTION_DUE_TO_LOW_RESOURCE,	//20
	HCI_ERCODE_REMOTE_DEVICE_TERMINATED_CONNECTION_DUE_TO_POWER_OFF,
	HCI_ERCODE_CONNECTION_TERMINATED_BY_LOCAL_HOST,
	HCI_ERCODE_REPEAT_ATTEMPTS,
	HCI_ERCODE_PARING_NOT_ALLOWED,
	HCI_ERCODE_UNKNOWN_LMP_PDU,										//25
	HCI_ERCODE_UNSUPPORTED_REMOTE_FEATURE,
	HCI_ERCODE_SCO_OFFSET_REJECTED,
	HCI_ERCODE_SCO_INTERVAL_REJECTED,
	HCI_ERCODE_SCO_AIR_MODE_REJECTED,
	HCI_ERCODE_INVALID_LMP_PARAMETERS,								//30
	HCI_ERCODE_UNSPECIFIED_ERROR,
	HCI_ERCODE_UNSUPPORT_LMP_PARAMETER_VALUE,
	HCI_ERCODE_ROLE_CHANGE_NOT_ALLOWED,
	HCI_ERCODE_LMP_RESPONSE_TIMEOUT,
	HCI_ERCODE_LMP_ERROR_TRANSACTION_COLLICTION,					//35
	HCI_ERCODE_LMP_PDU_NOT_ALLOWED,
	HCI_ERCODE_ENCRYPTION_MODE_NOT_ACCEPTABLE,
	HCI_ERCODE_LINK_KEY_CANNOT_BE_CHANGEED,
	HCI_ERCODE_REQUESTED_QOS_NOT_SUPPORTED,
	HCI_ERCODE_INSTANT_PASSED,										//40
	HCI_ERCODE_PARING_WITH_UNIT_KEY_NOT_SUPPORTED,
	HCI_ERCODE_DIFFERNET_TRANSACTION_COLLICTON,
	HCI_ERCODE_RESERVED1,
	HCI_ERCODE_QOS_UNACCEPTABLE_PARAMETER,
	HCI_ERCODE_QOS_REJECTED,										//45
	HCI_ERCODE_CHANNAL_CLASSIFICATION_NOT_SUPPORTD,
	HCI_ERCODE_INSUFFICIENT_SECURITY,
	HCI_ERCODE_PARAMETER_OUT_OF_MANDATORY_RANGE,
	HCI_ERCODE_RESERVED2,
	HCI_ERCODE_ROLE_SWITCH_PENDING,									//50
	HCI_ERCODE_RESERVED3,
	HCI_ERCODE_RESERVED_SLOT_VIOLATION,
	HCI_ERCODE_ROLE_SWITCH_FAILED,
	HCI_ERCODE_EXTENDED_INQUIRY_RESPONSE_TO_LARGE,
	HCI_ERCODE_SERCURE_SIMPLE_PAIRING_NOT_SUPPORTED_BY_HOST,		//55
	HCI_ERCODE_HOST_BUSY_PAIRING,
	HCI_ERCODE_CONNECTION_REJECTED_DUE_TO_NO_SUITABLE_CHANNEL_FOUND,
	HCI_ERCODE_CONTROLLER_BUSY,
	HCI_ERCODE_UNACCEPTABLE_CONNECTION_PARAMETERS,
	HCI_ERCODE_DIRECTED_ADVERTISING_TIMEOUT,						//60
	HCI_ERCODE_CONNECTION_TERMINATED_DUE_TO_MIC_FAILURE,
	HCI_ERCODE_MAC_CONNECTION_FAILED,
	HCI_ERCODE_COARSE_CLOCK_ADJUSTMENT_REJECTED,
};

/**************************************************************************************************
* Internal Public Functions
**************************************************************************************************/
const HandlerData *APP_GetSystemHandle(void);
void APP_System_SetBtServiceClass(void);
U8 APP_System_GetMsgNumInQueue(void);
BOOL APP_System_IsMpTestMode(void);
void APP_System_MpTestModeSetToDefault(void);
void APP_System_SetToDefaultNvkey(void);
#if SINGLE_HEADSET_MODE_ENABLE
void APP_System_FcdSingleHSModeState(void);
BOOL APP_System_IsSingleHSMode(void);
void APP_System_EnterSingleHSMode(void);
void APP_System_ExitSingleHSMode(U8 isNeedBackRole);
#endif
BOOL APP_System_RoleModeLeave(BOOL isNeedBackRole, BOOL isClearAllMode);
BOOL APP_System_SetRoleMode(U8 mode, U8 role);
void APP_System_RoleModeLeaveInd(U8 mode);
void APP_System_RoleModeChangeInd(U8 status);
void APP_System_Discoverable(void);

<<<<<<< HEAD
#ifdef TAKE_OVER_LINK
=======
#ifdef AIR_TAKE_OVER_LINK_ENABLE
>>>>>>> db20e11 (second commit)
void APP_System_DetachAclLink(BD_ADDR_T *pBdAddr);
#endif
void APP_System_SetSystemFactoryValue(void);

void APP_System_Init(void);

#endif //_APP_SYSTEM_H_
